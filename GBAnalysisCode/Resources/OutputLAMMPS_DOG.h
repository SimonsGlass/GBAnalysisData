#ifndef OUTPUT_LAMMPS

#define OUTPUT_LAMMPS

#include "../Resources/std_include.h"
#include "../State/StaticState.h"

namespace LiuJamming
{

template <int dim>
bool OutputLAMMPS(string Filename, CStaticState<dim> &State)
{
	//Open the output file
	ofstream Output_File(Filename.c_str());
	Output_File.precision(15);

	if(!Output_File.is_open())
		return false;

	//Assumes that there are exactly two kinds of atoms.
	Eigen::VectorXd Radii;
	State.GetRadii(Radii);
	
	Eigen::VectorXd Positions;
	State.GetPositions(Positions);

	//Output the preamble
	Output_File << "State file generated by DSuss & SDog. Potential name: " << State.GetPotential()->DataToString() << endl << endl;

	Output_File << "\t" << State.GetParticleNumber() << " atoms\n";
	Output_File << "\t2 atom types\n";
	
	Eigen::Matrix<double,dim,dim> Transformation;
	State.GetBox()->GetTransformation(Transformation);
	Output_File << " 0.0 " << Transformation(0,0) << " xlo xhi\n";
	Output_File << " 0.0 " << Transformation(1,1) << " ylo yhi\n";
	Output_File << " 0.0 " << (dim > 2 ? Transformation(2,2) : 0.5) << " zlo zhi\n";

	//Output the atoms
	Output_File << "Atoms\n\n";

	for(int i = 0 ; i < State.GetParticleNumber() ; i++)
		Output_File << "\t" << i+1 << "\t" << (abs(Radii(i) - Radii(0))<0.001 ? 1 : 2) << "\t" << Positions(dim*i) << "\t" << Positions(dim*i+1) << "\t" << (dim>2 ? Positions(dim*i+2) : 0.25) << endl;

	Output_File.close();  

	return true;
}

template <int dim>
bool InputLAMMPS(string Filename, CStaticState<dim> &State)
{
        printf("TAS00050\n");fflush(stdout);
	//Open the input file
	ifstream Input_File(Filename.c_str());
	
	if(!Input_File.is_open())
		return false;

	char line[256];
        printf("TAS00051\n");fflush(stdout);
	
	Input_File.getline(line,256);
	Input_File.getline(line,256);

        printf("TAS00052\n");fflush(stdout);
	//Read the number of particles
	int N;
	string tmp_str;
	int tmp_int; 
	Input_File >> N >> tmp_str;
	Input_File >> tmp_int >> tmp_str >> tmp_str;
        printf("TAS00053\n");fflush(stdout);
	
	State.ClearSystem(N);	
	
	Input_File.getline(line,256);
	
	double sx,sy,sz,tmp_dbl;
	Input_File >> tmp_dbl >> sx >> tmp_str >> tmp_str;
	Input_File >> tmp_dbl >> sy >> tmp_str >> tmp_str;
	Input_File >> tmp_dbl >> sz >> tmp_str >> tmp_str;

	cout << "Read box size: " << sx << " : " << sy << " : " << sz << endl;
        printf("TAS00054\n");fflush(stdout);

	if(dim==2){
		Eigen::Matrix<double,dim,dim> Trans = Eigen::Array<double,dim,dim>::Zero();
                Trans(0,0) = sx;
                Trans(1,1) = sy;
                State.GetBox()->SetTransformation(Trans);
	}else{
		Eigen::Matrix<double,dim,dim> Trans = Eigen::Array<double,dim,dim>::Zero();
		Trans(0,0) = sx;
		Trans(1,1) = sy;
		Trans(2,2) = sz;
		State.GetBox()->SetTransformation(Trans);
	}

	for(int i = 0 ; i < 14 ; i++)
		Input_File.getline(line,256);
	
	Eigen::VectorXd Positions(dim*N);
	Eigen::VectorXd Radii(N);	

	cout << "Reading particles.\n";
	cout << "Number of particles: " << State.GetParticleNumber() << endl;

	for(int i = 0 ; i < N ; i++)
	{
		int index,type,tmp;
		double x,y,z;
                printf("TAS00055\n");fflush(stdout);

		Input_File >> index >> type >> x >> y >> z >> tmp >> tmp >> tmp;
                printf("TAS00056\n");fflush(stdout);

                cout << "Read particle " << index << " at " << x << " : " << y << " : " << z << endl;


		index--;

		Positions(index*dim) = x;
		Positions(index*dim+1) = y;
		if(dim == 3)
			Positions(index*dim+2) = z;

		Radii(index) = type == 1 ? 0.44 : 0.5;

		
	}	

	State.SetPositions(Positions);
	State.SetRadii(Radii);
	
	State.SetPotentialLJ(1.0);

	return true;
}


template <int dim>
bool InputLAMMPS_Dump(string Filename, CStaticState<dim> &State)
{
	//Open the input file
	ifstream Input_File(Filename.c_str());
	
	if(!(Input_File.is_open() && Input_File.good()))
		return false;

	char line[256];
	
	Input_File.getline(line,256);
	Input_File.getline(line,256);
	Input_File.getline(line,256);

	//Read the number of particles
	int N;
	string tmp_str;
	int tmp_int; 
	Input_File >> N;

	Input_File.getline(line,256);
	
	State.ClearSystem(N);	
	
	Input_File.getline(line,256);
	
	double sx,sy,sz,tmp_dbl;
	Input_File >> tmp_dbl >> sx;
	Input_File >> tmp_dbl >> sy;
	Input_File >> tmp_dbl >> sz;

        printf("TAS00699\n");fflush(stdout);	
	cout << "Read box size: " << sx << " : " << sy << " : " << sz << endl;

	if(dim==2){
		Eigen::Matrix<double,dim,dim> Trans = Eigen::Array<double,dim,dim>::Zero();
                Trans(0,0) = sx;
                Trans(1,1) = sy;
                State.GetBox()->SetTransformation(Trans);
	}else{
		Eigen::Matrix<double,dim,dim> Trans = Eigen::Array<double,dim,dim>::Zero();
		Trans(0,0) = sx;
		Trans(1,1) = sy;
		Trans(2,2) = sz;
		State.GetBox()->SetTransformation(Trans);
	}

	Input_File.getline(line,256);
	Input_File.getline(line,256);
	
	Eigen::VectorXd Positions(dim*N);
	Eigen::VectorXd Radii(N);	

	cout << "Reading particles.\n";
	cout << "Number of particles: " << State.GetParticleNumber() << endl;

	int nA = 0;
	for(int i = 0 ; i < N ; i++)
	{
		int index,type,tmp;
		double x,y,z;

		Input_File >> index >> type >> x >> y >> z;

//                cout << "Read particle " << index << " at " << x << " : " << y << " : " << z << endl;


		index--;
		
		if(x==1.0) x = 0.0;
		if(y==1.0) y=0.0;
		if(dim==3 && z == 1.0) z = 0.0;

		Positions(index*dim) = x ;
		Positions(index*dim+1) = y;
		if(dim == 3)
			Positions(index*dim+2) = z;

		Radii(index) = type == 1 ? 1 : 2;
		if(type==1)
			nA++;
		
	}	

	Eigen::VectorXd RealPositions(dim*N);
	Eigen::VectorXd RealRadii(N);

	int ait = 0;
	int bit = nA;
	//reorder by type
	for(int i = 0 ; i < N ; i++)
	{
		if(Radii(i) < 1.5)
		{
			RealPositions(ait*dim) = Positions(i*dim);
			RealPositions(ait*dim+1) = Positions(i*dim+1);
			RealPositions(ait*dim+2) = Positions(i*dim+2);	
			RealRadii(ait) = Radii(i);
			ait++; 
		}else{
			RealPositions(bit*dim) = Positions(i*dim);
                        RealPositions(bit*dim+1) = Positions(i*dim+1);
                        RealPositions(bit*dim+2) = Positions(i*dim+2);
                        RealRadii(bit) = Radii(i);
                        bit++;
		}
	}
	
	Input_File.close();
	State.SetPositionsVirtual(RealPositions);
	State.SetRadii(RealRadii);
	
	State.SetPotentialLJ(1.0);

	return true;
}


template <int dim>
bool InputLAMMPS_Average(string Filename, CStaticState<dim> &State)
{
	//Open the input file
	ifstream Input_File(Filename.c_str());
	
	if(!Input_File.is_open())
		return false;

	char line[256];
	
	Input_File.getline(line,256);
	Input_File.getline(line,256);
	Input_File.getline(line,256);

	//Read the number of particles
	int N;
	string tmp_str;
	int tmp_int; 
	Input_File >> N;

	Input_File.getline(line,256);
	
	State.ClearSystem(N);	
	
	Input_File.getline(line,256);
	
	double sx,sy,sz,tmp_dbl;
	Input_File >> tmp_dbl >> sx;
	Input_File >> tmp_dbl >> sy;
	Input_File >> tmp_dbl >> sz;

        printf("TAS00700\n");fflush(stdout);	
	cout << "Read box size: " << sx << " : " << sy << " : " << sz << endl;

	if(dim==2){
		Eigen::Matrix<double,dim,dim> Trans = Eigen::Array<double,dim,dim>::Zero();
                Trans(0,0) = sx;
                Trans(1,1) = sy;
                State.GetBox()->SetTransformation(Trans);
	}else{
		Eigen::Matrix<double,dim,dim> Trans = Eigen::Array<double,dim,dim>::Zero();
		Trans(0,0) = sx;
		Trans(1,1) = sy;
		Trans(2,2) = sz;
		State.GetBox()->SetTransformation(Trans);
	}

	Input_File.getline(line,256);
	Input_File.getline(line,256);
	
	Eigen::VectorXd Positions(dim*N);
	Eigen::VectorXd Radii(N);	

	cout << "Reading particles.\n";
	cout << "Number of particles: " << State.GetParticleNumber() << endl;

	for(int i = 0 ; i < N ; i++)
	{
		int index,type,tmp;
		double x,y,z;

		Input_File >> index >> type >> x >> y >> z;

//                cout << "Read particle " << index << " at " << x << " : " << y << " : " << z << endl;


		index--;
		
		//positions are in unwrapped coordinates, so wrap them
		while(x >= sx)
			x -= sx;

		while(x < 0)
			x += sx;

		while(y >= sy)
			y -= sy;
	
		while(y < 0)
			y += sy;

		if(dim==3)
		{
			while(z >= sz)
                        	z -= sz;

                	while(z < 0)
                        	z += sz;
		}

		Positions(index*dim) = x ;
		Positions(index*dim+1) = y;
		if(dim == 3)
			Positions(index*dim+2) = z;

		Radii(index) = type == 1 ? 0.44 : 0.5;

		
	}	
	Input_File.close();
	State.SetPositions(Positions);
	State.SetRadii(Radii);
	
	State.SetPotentialLJ(1.0);

	return true;
}

}
#endif
